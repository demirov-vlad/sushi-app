generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  fullName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      UserRole @default(USER)
  verified  DateTime

  provider   String?
  providerId String?

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]

  variants ProductVariant[]
}

model ProductVariant {
  id    Int  @id @default(autoincrement())
  price Int
  size  Int?

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]
}

model Ingredient {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]

  cartItems CartItem[]
}

model Cart {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  totalAmount Int      @default(0)

  token String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  ingredients Ingredient[]
}

model Order {
  id          Int         @id @default(autoincrement())
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json

  fullName String
  email    String
  phone    String
  address  String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
